# A snakemake pipeline for regression analysis across many drugs and features
import pylab
from gdsctools import *
import pandas as pd


configfile: "config.yaml"

assert config['method'] in ['lasso', "elastic_net", "ridge"]

print("//Loading main data set")
ic50 = IC50(config['ic50'])
gf = GenomicFeatures(config['genomic_features'])

gd = regression.GDSCLasso(ic50,gf)

DRUGIDS = gd.drugIds[0:10]
PREFIX = "gdsctools_regression_"

localrules: all, get_weights, get_results, report

rule all:
    input: "index.html"

rule report:
    input: 
        PREFIX+"scatter_plot.png",
        PREFIX+"weights.csv",
        PREFIX+"results.csv",
    output: "index.html"
    run:
        from gdsctools import regression_report
        report = regression_report.RegressionReport(config['method'])
        report.create_html_main()

rule all_drug_all_features:
    input:
        expand(PREFIX+"weights_{drugid}.png", drugid=DRUGIDS),
        expand(PREFIX+"results_{drugid}.json", drugid=DRUGIDS),
        expand(PREFIX+"boxplot_{drugid}.png", drugid=DRUGIDS),
        expand(PREFIX+"weights_{drugid}.csv", drugid=DRUGIDS),
        expand(PREFIX+"importance_{drugid}.png", drugid=DRUGIDS),
        expand(PREFIX+"randomness_{drugid}.png", drugid=DRUGIDS),


rule get_weights:
    message: "gather back all individual weights"
    input: expand(PREFIX+"weights_{drugid}.csv", drugid=DRUGIDS),
    output: PREFIX+"weights.csv"
    run:
        df = pd.concat(
            [pd.read_csv(this).set_index("features") for this in input],
            axis=1)
        df.columns = DRUGIDS
        df.to_csv(output[0])

rule scatter_plot:
    input: PREFIX+"results.csv"
    output: PREFIX+"scatter_plot.png"
    run:
        df = pd.read_csv(input[0]).set_index("drugid")
        pylab.clf()
        pylab.scatter(df.Rp, -pylab.log10(df.ttest), c=df.bayes, s=80, vmax=20, alpha=0.9)
        pylab.grid(True)
        pylab.colorbar(extend="max")
        pylab.xlabel("Regression coefficients")
        pylab.ylabel("-log10 ttest")
        pylab.xlim([0, pylab.xlim()[1]])
        pylab.ylim([0, pylab.ylim()[1]])
        pylab.savefig(output[0])


rule get_results:
    input: expand(PREFIX+"results_{drugid}.json", drugid=DRUGIDS),
    output: PREFIX+"results.csv"
    run:
        data = []
        for this in input:
            with open(this, "r") as fh:
                data.append(json.loads(fh.read()))
        df = pd.DataFrame(data)
        df.set_index("drugid", inplace=True)
        df.to_csv(output[0])


rule one_drug_all_features:
    output:
        PREFIX+"weights_{drugid}.png",
        PREFIX+"weights_{drugid}.csv",
        PREFIX+"results_{drugid}.json",
        PREFIX+"boxplot_{drugid}.png",
        randomness = PREFIX+"randomness_{drugid}.png",
        importance = PREFIX+"importance_{drugid}.png"
    run:
        drugid = int(wildcards.drugid)

        res = gd.runCV(drugid, verbose=False, n_folds=config['kfold'])
        bestmodel = gd.get_model(alpha=res.alpha)

        weights = gd.plot_weight(drugid, bestmodel)
        pylab.savefig(output[0])
        pylab.close()

        weights = pd.DataFrame({
                "weigths": res.coefficients,
                "features":gd.feature_names})
        weights.to_csv(output[1], index=False)

        gd.plot_importance(drugid, bestmodel)
        pylab.savefig(output['importance'])
        pylab.close()

        gd.boxplot(drugid, model=bestmodel, n=10, bx_vert=False)
        pylab.savefig(output[3])
        pylab.close()

        ran = gd.check_randomness(drugid, config["kfold"], N=50, show=True)
        pylab.savefig(output.randomness)
        pylab.close()
        results = {"drugid": int(drugid),
                "Rp":res.Rp,
                "alpha": res.alpha,
                "ln_alpha": res.ln_alpha,
                "ttest": ran['ttest_pval'],
                "bayes":ran['bayes_factor']}

        fh = open(output[2], "w")
        json.dump(results, fh)
        fh.close()

